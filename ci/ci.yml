name: Haskell-CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  linux:
    name: Haskell-CI - Linux - ${{ matrix.compiler }}
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    container:
      image: haskell-ci:ghc-9.6.7
    continue-on-error: ${{ matrix.allow-failure }}
    strategy:
      matrix:
        include:
          - compiler: ghc-9.6.7
            compilerKind: ghc
            compilerVersion: 9.6.7
            setup-method: ghcup
            allow-failure: false
      fail-fast: false
    steps:
      - name: Print environment variables
        run: |
          echo "ACTIONS_CACHE_URL=$ACTIONS_CACHE_URL"
          echo "ACTIONS_RUNTIME_URL=$ACTIONS_RUNTIME_URL"
          echo "ACTIONS_RUNTIME_TOKEN=$ACTIONS_RUNTIME_TOKEN"
      - name: Set PATH and environment variables
        run: |
          echo "/root/.cabal/bin" >> $GITHUB_PATH
          echo "LANG=C.UTF-8" >> "$GITHUB_ENV"
          echo "CABAL_DIR=/root/.cabal" >> "$GITHUB_ENV"
          echo "CABAL_CONFIG=/root/.cabal/config" >> "$GITHUB_ENV"
          echo "HC=/root/.ghcup/bin/ghc-9.6.7" >> "$GITHUB_ENV"
          echo "HCPKG=/root/.ghcup/bin/ghc-pkg-9.6.7" >> "$GITHUB_ENV"
          echo "HADDOCK=/root/.ghcup/bin/haddock-9.6.7" >> "$GITHUB_ENV"
          echo "CABAL=cabal" >> "$GITHUB_ENV"
          HCNUMVER=$(/root/.ghcup/bin/ghc-9.6.7 --numeric-version | perl -ne '/^(\d+)\.(\d+)\.(\d+)(\.(\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')
          echo "HCNUMVER=$HCNUMVER" >> "$GITHUB_ENV"
          echo "ARG_TESTS=--enable-tests" >> "$GITHUB_ENV"
          echo "ARG_BENCH=--enable-benchmarks" >> "$GITHUB_ENV"
          echo "HEADHACKAGE=false" >> "$GITHUB_ENV"
          echo "ARG_COMPILER=--$HCKIND --with-compiler=/root/.ghcup/bin/ghc-9.6.7" >> "$GITHUB_ENV"
        env:
          HCKIND: ${{ matrix.compilerKind }}
          HCNAME: ${{ matrix.compiler }}
          HCVER: ${{ matrix.compilerVersion }}
      - name: env
        run: |
          env
      - name: versions
        run: |
          $HC --version || true
          $HC --print-project-git-commit-id || true
          $CABAL --version || true
      - name: checkout
        uses: actions/checkout@v4
        with:
          path: source
      - name: initial cabal.project for sdist
        run: |
          touch cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/." >> cabal.project
          cat cabal.project
      - name: sdist
        run: |
          mkdir -p sdist
          $CABAL sdist all --output-dir $GITHUB_WORKSPACE/sdist
      - name: unpack
        run: |
          mkdir -p unpacked
          find sdist -maxdepth 1 -type f -name '*.tar.gz' -exec tar -C $GITHUB_WORKSPACE/unpacked -xzvf {} \;
      - name: generate cabal.project
        run: |
          PKGDIR_hibet="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/hibet-[0-9.]*')"
          echo "PKGDIR_hibet=${PKGDIR_hibet}" >> "$GITHUB_ENV"
          rm -f cabal.project cabal.project.local
          touch cabal.project
          touch cabal.project.local
          echo "packages: ${PKGDIR_hibet}" >> cabal.project
          echo "package hibet" >> cabal.project
          echo "    ghc-options: -Werror=missing-methods" >> cabal.project
          cat >> cabal.project <<EOF
          EOF
          $HCPKG list --simple-output --names-only | perl -ne 'for (split /\s+/) { print "constraints: any.$_ installed\n" unless /^(hibet)$/; }' >> cabal.project.local
          cat cabal.project
          cat cabal.project.local
      - name: dump install plan
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dry-run all
          cabal-plan
      - name: Debug cache directory before restore
        run: |
          echo "CABAL_DIR=$CABAL_DIR"
          echo "Checking $HOME/.cabal/store"
          ls -la $HOME/.cabal/store || echo "Directory does not exist"
      - name: restore cache
        uses: actions/cache/restore@v4
        with:
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ github.sha }}
          path: ~/.cabal/store
          restore-keys: ${{ runner.os }}-${{ matrix.compiler }}-
      - name: Debug cache directory after restore
        run: |
          echo "CABAL_DIR=$CABAL_DIR"
          echo "Checking $HOME/.cabal/store"
          ls -la $HOME/.cabal/store || echo "Directory does not exist"
          find $HOME/.cabal/store -type f | wc -l
      - name: install dependencies
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --dependencies-only -j2 all
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dependencies-only -j2 all
      - name: build w/o tests
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all
      - name: build
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --write-ghc-environment-files=always
      - name: tests
        run: |
          $CABAL v2-test $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --test-show-details=direct
      - name: cabal check
        run: |
          cd ${PKGDIR_hibet} || false
          $CABAL -vnormal check
      - name: unconstrained build
        run: |
          rm -f cabal.project.local
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all
      - name: Build binary
        run: |
          mkdir -p dist
          $CABAL v2-install hibet --installdir=dist --overwrite-policy=always --install-method=copy
      - name: save cache
        if: always()
        uses: actions/cache/save@v4
        with:
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ github.sha }}
          path: ~/.cabal/store